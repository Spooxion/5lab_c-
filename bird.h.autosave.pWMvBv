#ifndef BIRD_H
#define BIRD_H

#include <iostream>
#include <string>

class Bird
{

protected:
    std::string name;
    float weight;
    int age;
    int counter=0;
    bool type_of_fly;
    bool male;

public:
  //конструктор по умолчанию.
  Bird(){
        name="unknown";
        weight=0;
        age=0;
        type_of_fly=false;
  }
  std::string getName(){
      return name;
  }
  int getCounter(){
      return counter;
  }
  float getWeight (){
      return weight;
  }
  int getAge(){
      return age;
  }
  void setName(std::string name1){
      name=name1;
  }
  void setAge(int age1){
      age=age1;
  }
  void setWeight(float weight1){
      weight=weight1;
  }
  void setCounter(int counter1){
      counter=counter1;
  }

};


class Wild : public Bird
{
private:
    W(Bird* obj1)
        {
     
        }
    std::string type_of_food;
    std::string fear_of_man;
public:
    void setTypeofFood(std::string type1){
        type_of_food=type1;
    }
    std::string getTypeofFood(){
        return type_of_food;
    }
    void setFearofMan(std::string fear1){
        fear_of_man=fear1;
    }
    std::string getNickName(){
        return fear_of_man;
    }
};

class Domestic : public Bird
{
private:
    std::string nickname;
    std::string useful;
public:

    void setNickName(std::string nickname1){
        nickname=nickname1;
    }
    std::string getNickName(){
        return nickname;
    }
    void setUseful(std::string useful1){
        useful=useful1;
    }
    std::string getUseful(){
        return useful;
    }
};

#endif // BIRD_H
